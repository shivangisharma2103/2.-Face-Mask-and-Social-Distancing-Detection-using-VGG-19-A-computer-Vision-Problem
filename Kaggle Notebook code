Hi this is my Kaggle Notebook for you to visit and check out the code!
I hope this helps you, Thanks!

[The Kaggle Notebook Link -->]  (https://www.kaggle.com/shivangi21/face-mask-detection)


This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd
import cv2# data processing, CSV file I/O (e.g. pd.read_csv)
from scipy.spatial import distance

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
     print(os.path.join(dirname, filename))
     
     
#opening the haarcascade face-mask-detection.xml

face_model = cv2.CascadeClassifier('../input/haar-cascades-for-face-detection/haarcascade_frontalface_default.xml')
import matplotlib.pyplot as plt
#implementing on the sample image
img = cv2.imread('../input/face-mask-detection/images/maksssksksss244.png')
#converting in greyscale because more convinient to work in greyscale
img = cv2.cvtColor(img, cv2.IMREAD_GRAYSCALE)
faces = face_model.detectMultiScale(img,scaleFactor=1.1, minNeighbors=4)
#returns a list of (x,y,w,h) tuples
img_2 = cv2.cvtColor(img, cv2.COLOR_RGB2BGR) #converted to colored o/p image
for (x,y,w,h) in faces:
    cv2.rectangle(img_2,(x,y),(x+w,y+h),(0,0,250),2)
    
plt.figure(figsize=(12,12))
plt.imshow(img_2)

CALCULATING/ CHECKING THE SOCIAL DISTANCING VIOLATION We have to see if the distance between two people is not less than the MIN_DISTANCE. The MIN_DISTANCE is calculated keeping in mind the practical minimum distance(for instance, 6ft in India). This is mainly done by iterating over coordinates of faces and calculating the distance between each possible pair

MIN_DISTANCE = 130
#we have to check for pair or greater
if len(faces)>=2:
    label = [0 for i in range (len(faces))]
    for i in range(len(faces)-1):
        for j in range(i+1, len(faces)):
            dist = distance.euclidean(faces[i][:2], faces[j][:2])#calculating the distance between people 
            if dist<MIN_DISTANCE:
                label[i] = 1
                label[j] = 1
                
    new_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
    for i in range(len(faces)):
        (x,y,w,h)=faces[i]
        if label[i]==1:
            cv2.rectangle(new_img,(x,y), (x+w, y+h),(255,0,0),1)#if distance<MIN_DISTANCE then red box showing violation of social distancing
        else:
            cv2.rectangle(new_img,(x,y),(x+w,y+h),(0,255,0),1)#else green box showing Social distancing followed
    plt.figure(figsize=(10,10))
    plt.imshow(new_img)
    
else:
  print("No. of faces detected is less than 2")
  
USING VGG19 FOR MASK DETECTION

from keras.applications.vgg19 import VGG19
from keras.applications.vgg19 import preprocess_input
from keras.layers import Flatten, Dense
from keras import Sequential
from keras.preprocessing.image import ImageDataGenerator
#loading the test and the training data
test_dir = '../input/face-mask-12k-images-dataset/Face Mask Dataset/Test'
train_dir = '../input/face-mask-12k-images-dataset/Face Mask Dataset/Train'
val_dir = '../input/face-mask-12k-images-dataset/Face Mask Dataset/Validation'


#data agumentation
train_datagen = ImageDataGenerator(rescale=1.0/255, horizontal_flip = True,zoom_range=0.2, shear_range=0.2)
train_generator=train_datagen.flow_from_directory(directory=train_dir,target_size=(128,128),class_mode = 'categorical', batch_size=32)
val_datagen = ImageDataGenerator(rescale=1.0/255)
val_generator=val_datagen.flow_from_directory(directory=val_dir,target_size=(128,128),class_mode = 'categorical', batch_size=32)
test_datagen = ImageDataGenerator(rescale=1.0/255)
test_generator= test_datagen.flow_from_directory(directory=val_dir,target_size=(128,128),class_mode = 'categorical', batch_size=32)

#BUILDING VGG19 TRASFER LEARNING MODEL
vgg19 = VGG19(weights='imagenet',include_top=False,input_shape=(128,128,3))

for layer in vgg19.layers:
    layer.trainable = False
    
model = Sequential()
model.add(vgg19)
model.add(Flatten())
model.add(Dense(2,activation='sigmoid'))
model.summary()

model.compile(optimizer="adam", loss="categorical_crossentropy",metrics="accuracy")
history = model.fit_generator(generator=train_generator, 
                             steps_per_epoch=len(train_generator)//32,
                              epochs = 20, validation_data = val_generator,
                              validation_steps = len(val_generator)//32)
                              
 #NOW IMPLEMENTING ON A SAMPLE IMAGE
sample_mask = cv2.imread('../input/face-mask-12k-images-dataset/Face Mask Dataset/Test/WithMask/1565.png')
sample_mask = cv2.resize(sample_mask,(128,128))
plt.imshow(sample_mask)
sample_mask = np.reshape(sample_mask,[1,128,128,3])
sample_mask = sample_mask/255.0

#We'll predict the model on sample_mask image

model.predict(sample_mask)

#the model is capable of classifying if a person is wearing a mask or not
model.save('masknet.h5')

#INTEGRATING WITH HAAR CASCADE
we now take crops of faces detected in the image and use the model trained in the above section to determine whether the individual faces have mask on or not.

mask_label = {0:'MASK', 1:'NO MASK'}
dist_label = {0:(0,255,0), 1:(255,0,0)}
if len(faces)>=2:
    label = [0 for i in range(len(faces))]
    for i in range(len(faces)-1):
        for j in range(i+1, len(faces)):
            dist = distance.euclidean(faces[i][:2],faces[j][:2])
            if dist<MIN_DISTANCE:
                label[i] = 1
                label[j] = 1
    new_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR) #colored output image
    for i in range(len(faces)):
        (x,y,w,h) = faces[i]
        crop = new_img[y:y+h,x:x+w]
        crop = cv2.resize(crop,(128,128))
        crop = np.reshape(crop,[1,128,128,3])/255.0
        mask_result = model.predict(crop)
        cv2.putText(new_img,mask_label[mask_result.argmax()],(x, y-10),cv2.FONT_HERSHEY_SIMPLEX,0.5,dist_label[label[i]],2)
         cv2.rectangle(new_img,(x,y),(x+w,y+h),dist_label[label[i]],1)
    plt.figure(figsize=(10,10))
    plt.imshow(new_img)
    
else:
        print('no of faces is less than 2')
        
